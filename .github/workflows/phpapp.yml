name: PHP CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: phpapp
          MYSQL_ROOT_PASSWORD: root
          MYSQL_ROOT_HOST: "%"
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -u root -proot"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - uses: actions/checkout@v3

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
        extensions: mbstring, intl, mysqli, zip
        coverage: none  # Removed xdebug to avoid JIT conflicts
        tools: composer:v2
        ini-values: |
          opcache.enable=1
          opcache.enable_cli=1
          opcache.jit=0  # Disable JIT to prevent warnings

    - name: Validate composer.json
      run: composer validate --strict

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress

    - name: Create .env file
      run: |
        cp .env.example .env
        sed -i 's/^DB_HOST=.*/DB_HOST=127.0.0.1/' .env
        sed -i 's/^DB_DATABASE=.*/DB_DATABASE=phpapp/' .env
        sed -i 's/^DB_USERNAME=.*/DB_USERNAME=root/' .env
        sed -i 's/^DB_PASSWORD=.*/DB_PASSWORD=root/' .env

    - name: Wait for MySQL
      run: |
        while ! mysqladmin ping -h"127.0.0.1" -P"3306" -u"root" -p"root" --silent; do
          sleep 1
        done

    - name: Run PHP built-in server
      run: php -S 127.0.0.1:8000 -t public &

    - name: Wait for server to start
      run: |
        timeout=30
        until curl -s -f http://127.0.0.1:8000 > /dev/null || [ $timeout -eq 0 ]; do
          echo "Waiting for PHP server to start..."
          sleep 1
          ((timeout--))
        done
        if [ $timeout -eq 0 ]; then
          echo "Timeout waiting for PHP server"
          exit 1
        fi

    - name: Check application health
      run: |
        response=$(curl -s -w "\n%{http_code}" http://127.0.0.1:8000)
        http_code=$(echo "$response" | tail -n1)
        if [ "$http_code" -ne 200 ]; then
          echo "Application health check failed with HTTP code: $http_code"
          echo "Response body:"
          echo "$response" | head -n-1
          exit 1
        fi